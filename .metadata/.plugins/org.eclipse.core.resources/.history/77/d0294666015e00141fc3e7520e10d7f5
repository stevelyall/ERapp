package ca.stevenlyall.ersurvey;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.Date;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.RatingBar;
import android.widget.TextView;
import android.widget.Toast;

// TODO going back one question, does not restore rating
public class SurveyActivity extends Activity {

	Survey survey = new Survey();
	int questionNum = 0;
	boolean answered;

	// UI elements
	RatingBar rating;
	Button nextButton, backButton;
	TextView questionTextView, lowScale, medScale, highScale;

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_survey);

		rating = (RatingBar) findViewById(R.id.rating);
		rating.setClickable(true);
		nextButton = (Button) findViewById(R.id.nextButton);
		backButton = (Button) findViewById(R.id.backButton);
		questionTextView = (TextView) findViewById(R.id.welcome);
		lowScale = (TextView) findViewById(R.id.lowDesc);
		medScale = (TextView) findViewById(R.id.medDesc);
		highScale = (TextView) findViewById(R.id.highDesc);
		askMA();
	}

	private void askMA() {
		if (rating.getRating() != 0) {
			answered = true;
		} else {
			answered = false;
		}
		Log.i("answered", "false" + questionNum);

		lowScale.setText(survey.getMaLowScale());
		medScale.setText("");
		highScale.setText(survey.getMaHighScale());

		if (questionNum > survey.getMACodes().length-1) {
			Log.w("survey", "all MA questions have been asked, questionNum="
					+ questionNum);
			questionNum = 0;
			askER();
			return;
		} else {
			questionTextView.setText(survey.getMAQuestion(questionNum));

			rating.setOnTouchListener(new OnTouchListener() {
				@Override
				public boolean onTouch(View v, MotionEvent event) {
					survey.setMAResponse(questionNum, rating.getRating());
					answered = true;
					Log.i("answered", "true" + questionNum);
					return false;
				}

			});
			nextButton.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					if (!answered) {
						Toast.makeText(getBaseContext(),
								"Please select an answer", Toast.LENGTH_SHORT)
								.show();
						return;
					}

					questionNum++;
					if (questionNum < survey.getMAResponses().length) {
						rating.setRating(survey.getMAResponses()[questionNum]);
					} else {
						rating.setRating(survey.getMAResponses()[questionNum - 1]);
					}
					askMA();
				}

			});
			// backButton
			backButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					if (questionNum == 0) {
						Toast.makeText(getBaseContext(),
								"Can't go back, already at first question",
								Toast.LENGTH_SHORT).show();
						Log.i("survey", "can't go back from first question");
						return;
					}
					survey.setMAResponse(questionNum, rating.getRating());
					questionNum--;
					rating.setRating(survey.getMAResponses()[questionNum]);
					answered = true;
					questionTextView.setText(survey.getMAQuestion(questionNum));

				}
			});

		}
	}

	private void askER() {
		if (rating.getRating() != 0) {
			answered = true;
		} else {
			answered = false;
		}
		Log.i("answered", "false" + questionNum);

		lowScale.setText(survey.getErLowScale());
		medScale.setText("");
		highScale.setText(survey.getErHighScale());
		
		if (questionNum > survey.getERCodes().length-1) {
			Log.w("survey", "all ER questions have been asked, questionNum="
					+ questionNum);
			questionNum = 0;
			askMotiv();
			return;
		} else {
			questionTextView.setText(survey.getERQuestion(questionNum));
			rating.setRating(survey.getERResponses()[questionNum]);
			rating.setOnTouchListener(new OnTouchListener() {
				@Override
				public boolean onTouch(View v, MotionEvent event) {
					survey.setERResponse(questionNum, rating.getRating());
					answered = true;
					Log.i("answered", "true" + questionNum);
					return false;
				}

			});
			// next button
			nextButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					if (!answered) {
						Toast.makeText(getBaseContext(),
								"Please select an answer", Toast.LENGTH_SHORT)
								.show();
						return;
					}

					questionNum++;
					if (questionNum < survey.getERResponses().length) {
						rating.setRating(survey.getERResponses()[questionNum]);
					} else {
						rating.setRating(survey.getERResponses()[questionNum - 1]);
					}
					askER();
				}

			});

			// backButton
			backButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					if (questionNum == 0) {
						// back to MA items
						survey.setERResponse(questionNum, rating.getRating());
						questionNum = survey.getMACodes().length - 1;
						answered = true;
						askMA();
						return;
					}
					survey.setERResponse(questionNum, rating.getRating());
					questionNum--;
					rating.setRating(survey.getERResponses()[questionNum]);
					answered = true;
					questionTextView.setText(survey.getERQuestion(questionNum));

				}
			});
		}
	}

	private void askMotiv() {
		if (rating.getRating() != 0) {
			answered = true;
		} else {
			answered = false;
		}
		Log.i("answered", "false");

		lowScale.setText(survey.getMotivLowScale());
		medScale.setText(survey.getMotivMedScale());
		highScale.setText(survey.getErHighScale());
		
		rating.setNumStars(10);
		rating.setStepSize(1.0f);
		if (questionNum == 2) {
			nextButton.setText(R.string.finish);

		}
		if (questionNum > survey.getMotivCodes().length-1) {
			Log.w("survey", "all Motiv questions have been asked, questionNum="
					+ questionNum);
			questionNum = 0;

			nextButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					finishSurvey();
					Intent quit = new Intent(getBaseContext(),
							QuitActivity.class);
					startActivity(quit);
					finish();
				}
			});
			return;
		} else {
			questionTextView.setText(survey.getMotivQuestion(questionNum));
			rating.setRating(survey.getMotivResponses()[questionNum]);
			Log.i("qnum", "question" + questionNum);
			rating.setOnTouchListener(new OnTouchListener() {
				@Override
				public boolean onTouch(View v, MotionEvent event) {
					survey.setMotivResponse(questionNum, rating.getRating());
					answered = true;
					Log.i("answered", "true" + questionNum);
					return false;
				}

			});
			// next button
			nextButton.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					if (!answered) {
						Toast.makeText(getBaseContext(),
								"Please select an answer", Toast.LENGTH_SHORT)
								.show();
						return;
					}

					questionNum++;
					if (questionNum < survey.getMotivResponses().length) {
						rating.setRating(survey.getMotivResponses()[questionNum]);
					} else {
						rating.setRating(survey.getMotivResponses()[questionNum - 1]);
					}
					askMotiv();
				}

			});
			// backButton
			backButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					if (questionNum == 0) {
						// back to ER items
						survey.setMotivResponse(questionNum, rating.getRating());
						questionNum = survey.getERCodes().length - 1;
						answered = true;
						askER();
						return;
					}
					survey.setMotivResponse(questionNum, rating.getRating());
					questionNum--;
					rating.setRating(survey.getMotivResponses()[questionNum]);
					answered = true;
					questionTextView.setText(survey.getMotivQuestion(questionNum));
					nextButton.setText(R.string.next);

				}
			});
		}
	}

	private void finishSurvey() {
		try {
			File filePath = Environment
					.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);

			File f = new File(filePath, "file.txt");
			FileOutputStream fos;
			// file exists already, append to it
			if (f.exists()) {
				fos = new FileOutputStream(f, true);
				Log.i("File", "File exists, appending " + fos.toString());

			} else {
				fos = new FileOutputStream(f);
				Log.i("File", "File exists, appending " + fos.toString());
			}

			fos.write("=============\n".getBytes());

			// timestamp
			Date date = new Date();
			Timestamp timestamp = new Timestamp(date.getTime());
			fos.write((timestamp.toString() + "\n").getBytes());

			// write MA responses to file
			fos.write("\nMomentary affect items:\n".getBytes());
			String[] codes = survey.getMACodes();
			float[] responses = survey.getMAResponses();
			for (int i = 0; i < codes.length; i++) {
				fos.write((codes[i] + ": " + responses[i] + "\n").getBytes());
			}

			// write ER responses to file
			fos.write("\nEmotion regulation items:\n".getBytes());
			codes = survey.getERCodes();
			responses = survey.getERResponses();
			for (int i = 0; i < codes.length; i++) {
				fos.write((codes[i] + ": " + responses[i] + "\n").getBytes());
			}
			// write motivation responses to file
			fos.write("\nMotivation items:\n".getBytes());
			codes = survey.getMotivCodes();
			responses = survey.getMotivResponses();
			for (int i = 0; i < codes.length; i++) {
				fos.write((codes[i] + ": " + responses[i] + "\n").getBytes());
			}

			fos.write("=============\n".getBytes());
			Log.i("File", "Finished writing to file");
			fos.close();
			Log.i("File", "File closed");
		} catch (IOException e) {
			Toast.makeText(this, "Problem writing data file",
					Toast.LENGTH_SHORT).show();
			Log.e("file", "couldn't open file for writing", e);
		}

	}
}
